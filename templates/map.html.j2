{% set this_page = "map" %}
{% extends "layout.html.j2" %}

{% block title %}Map | MeshInfo{% endblock %}
{% block head %}
  <script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
{% endblock %}

{% block content %}
  <div id="map" class="map" style="height: 100vh"></div>
  <div id="nodeDetail" class="ol-popup">
    <a href="#" id="popup-closer" class="ol-popup-closer"></a>
    <div id="popup-content"></div>
  </div>
  <div id="details" class="p-2" style="background-color: white;">
    <div>
      <div id="details-title"></div>
      <div id="details-subtitle"></div>
    </div>
    <div id="details-content">
    </div>
  </div>
  <div id="legend" class="p-2" style="background-color: #ffffff;">
    <div>LEGEND</div>
    <div>
      <div style="background-color: #66FF66; height: 4px; width: 25px; display: inline-flex;"></div> Heard A Neighbor
      <div</div>
    </div>
    <div>
      <div style="background-color: #6666FF; height: 4px; width: 25px; display: inline-flex;"></div> Heard By Neighbor
    </div>
    <div>
      <div style="background-color: #FF66FF; height: 4px; width: 25px; display: inline-flex;"></div> Both Heard Each Other
    </div>
  </div>
  <script type="module">
    async function reverseGeocode(lon, lat) {
      return fetch('https://nominatim.openstreetmap.org/reverse?format=json&lon=' + lon + '&lat=' + lat)
        .then(function(response) {
          return response.json();
        }).then(function(json) {
          console.log(json);
          return json;
        });
    }

    const default_position = {
      latitude: 38.5816,
      longitude: -121.4944,
    };
    var server_position = null;
    {% if 'latitude' in config['mesh'] and 'longitude'in config['mesh'] %}
      server_position = {
        latitude: {{ config['mesh']['latitude'] }},
        longitude: {{ config['mesh']['longitude'] }}
      };
    {% else %}
      server_position = default_position;
    {% endif %}

    var server_zoom = null;
    {% if 'zoom' in config['mesh'] %}
      server_zoom = {{ config['mesh']['zoom'] }};
    {% else %}
      server_zoom = 9.5;
    {% endif %}

    const map = new ol.Map({
      layers: [
        new ol.layer.Tile({
          source: new ol.source.OSM(),
        }),
      ],
      target: 'map',
      view: new ol.View({
        center: ol.proj.fromLonLat([server_position.longitude, server_position.latitude]),
        zoom: server_zoom,
      }),
    });

    var defaultStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 240, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 0
    });

    var offlineStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 0, 0.50)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 1
    });

    var onlineStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(50, 240, 50, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 2
    });

    const nodes = {};
    var neighborLayers = [];
    {% for id, node in nodes.items() %}
      {% if node.position is defined and node.position and node.position.longitude_i and node.position.latitude_i %}
      nodes['{{ id }}'] = {
        id: '{{ id }}',
        short_name: '{{ node.short_name }}',
        long_name: "{{ node.long_name }}",
        last_seen: '{{ node.last_seen }}',
        position: [{{ node.position.longitude_i / 10000000 }}, {{ node.position.latitude_i / 10000000 }}],
        online: {% if node.active %}true{% else %}false{% endif %}
      };
      {% if node.neighbors %}
      nodes['{{ id }}'].neighbors = [
        {% for neighbor in node.neighbors %}
          {
            id: '{{ utils.convert_node_id_from_int_to_hex(neighbor.neighbor_id) }}',
            snr: '{{ neighbor.snr }}',
            distance: '{{ neighbor.distance }}',
          },
        {% endfor %}
      ];
      {% else %}
      nodes['{{ id }}'].neighbors = [];
      {% endif %}
      {% endif %}
    {% endfor %}

    const features = [];
    // Add nodes to the map, loop through all nodes
    // and add a feature for each node that has a position
    Object.values(nodes).forEach(function(node) {
      if (node.position) {
        var feature = new ol.Feature({
          geometry: new ol.geom.Point(ol.proj.fromLonLat(node.position)),
          node: node,
        });
        if (node.online) {
          feature.setStyle(onlineStyle);
        } else {
          feature.setStyle(offlineStyle);
        }
        features.push(feature);
      }
    });

    const layer = new ol.layer.Vector({
      style: defaultStyle,
      source: new ol.source.Vector({
        features: features
      })
    });
    map.addLayer(layer);

    var container = document.getElementById('nodeDetail');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var nodeDetails = document.getElementById('details');
    var nodeTitle = document.getElementById('details-title');
    var nodeSubtitle = document.getElementById('details-subtitle');
    var nodeContent = document.getElementById('details-content');

    var overlay = new ol.Overlay({
      element: container,
      autoPan: true,
      autoPanAnimation: {
          duration: 250
      }
    });
    map.addOverlay(overlay);

    var selectedStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 240, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'orange',
          width: 2
        })
      })
    });
    var select = new ol.interaction.Select({
      condition: ol.events.condition.click,
      style: selectedStyle
    });
    map.addInteraction(select);

    closer.onclick = function() {
      select.getFeatures().clear();
      neighborLayers.map(function(layer) {
        map.removeLayer(layer);
      });
      neighborLayers = [];
      overlay.setPosition(undefined);
      closer.blur();
      nodeTitle.innerHTML = '';
      nodeSubtitle.innerHTML = '';
      nodeContent.innerHTML = '';
      $('#details').hide();
      return false;
    };

    map.on('singleclick', async function (event) {
      neighborLayers.map(function(layer) {
        map.removeLayer(layer);
      });
      neighborLayers = [];

      if (map.hasFeatureAtPixel(event.pixel) === true) {
        $('#details').show();
        var coordinate = event.coordinate;
        var feature = map.forEachFeatureAtPixel(event.pixel, function(feature) {
          return feature;
        });
        if (feature) {
          var properties = feature.getProperties();
          var node = properties.node;
          var address = await reverseGeocode(node.position[0], node.position[1]);
          var display_name = [address.address.town, address.address.city, address.address.county, address.address.state, address.address.country].filter(Boolean).join(', ');

          var panel = '<a href="node_' + node.id + '.html">' + node.short_name + ' / ' + node.id + '</a><br/><br/>'
            + '<b>Position</b><br/>' + node.position + '<br/><br/>'
            + '<b>Location</b><br/>' + display_name + '<br/><br/>'
            + '<b>Status</b><br/>' + (node.online ? 'Online' : 'Offline') + '<br/><br/>'
            + '<b>Last Seen</b><br/>' + node.last_seen + '<br/><br/>';

          panel += '<b>Neighbors Heard</b><br/>';
          if (node.neighbors.length == 0) {
            panel += 'None';
          } else {
            panel += "<table class='table table-striped table-bordered table-sm'>";
            panel += "<thead><tr><th>Node</th><th>SNR</th><th>Distance</th></tr></thead>";
            panel += "<tbody>";
            panel += node.neighbors.map(function(neighbor) {
              var nnode = nodes[neighbor.id];
              if (!nnode) {
                return '<tr><td class="secondary-text">UNK</td><td>' + neighbor.snr + '</td><td></td></tr>';
              }
              const distance = Math.sqrt(
                Math.pow(node.position[0] - nnode.position[0], 2) +
                Math.pow(node.position[1] - nnode.position[1], 2)
              ) * 111.32;
              return '<tr><td><a href="node_' + nnode.id + '.html">' + nnode.short_name + '</a></td><td>' + neighbor.snr + '</td><td>' + distance.toFixed(2) + ' km</td></tr>';
            }).join('');
            panel += "</tbody>";
            panel += "</table>";

            node.neighbors.map(function(neighbor) {
              var nnode = nodes[neighbor.id];
              if (!nnode || !nnode.position) {
                return;
              }
              var points = [node.position, nnode.position];

              for (var i = 0; i < points.length; i++) {
                  points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
              }

              var featureLine = new ol.Feature({
                  geometry: new ol.geom.LineString(points)
              });

              var vectorLine = new ol.source.Vector({});
              vectorLine.addFeature(featureLine);

              var vectorLineLayer = new ol.layer.Vector({
                  source: vectorLine,
                  style: new ol.style.Style({
                      fill: new ol.style.Fill({ color: '#66FF66', weight: 8 }),
                      stroke: new ol.style.Stroke({ color: '#66FF66', width: 4 })
                  })
              });
              neighborLayers.push(vectorLineLayer);
              map.addLayer(vectorLineLayer);
            });
          }
          panel += '<br/><br/>';

          panel += '<b>Heard By Neighbors</b><br/>';
          var heard_by = Object.keys(nodes).filter(function(id) {
            return nodes[id].neighbors.some(function(neighbor) {
              return neighbor.id == node.id;
            });
          });
          if (heard_by.length == 0) {
            panel += 'None<br/>';
          } else {
            panel += "<table class='table table-striped table-bordered table-sm'>";
            panel += "<thead><tr><th>Node</th><th>SNR</th><th>Distance</th></tr></thead>";
            panel += "<tbody>";
            panel += heard_by.map(function(id) {
              var nnode = nodes[id];
              var neighbor = nnode.neighbors.find(function(neighbor) {
                return neighbor.id == node.id;
              });
              if (!nnode) {
                return '<tr><td class="text-secondary">UNK</td><td>' + neighbor.snr + '</td><td></td></tr>';
              }
              // calculate distance between two nodes without using ol.sphere
              const distance = Math.sqrt(
                Math.pow(node.position[0] - nnode.position[0], 2) +
                Math.pow(node.position[1] - nnode.position[1], 2)
              ) * 111.32;
              return '<tr><td><a href="node_' + nnode.id + '.html">' + nnode.short_name + '</a></td><td>' + neighbor.snr + '</td><td>' + distance.toFixed(2) + ' km</td></tr>';
            }).join('');
            panel += "</tbody>";
            panel += "</table>";

            // add the heard_by lines
            heard_by.map(function(id) {
              var nnode = nodes[id];
              if (!nnode || !nnode.position) {
                return;
              }
              var points = [node.position, nnode.position];

              for (var i = 0; i < points.length; i++) {
                  points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
              }

              var featureLine = new ol.Feature({
                  geometry: new ol.geom.LineString(points)
              });

              var vectorLine = new ol.source.Vector({});
              vectorLine.addFeature(featureLine);

              var lineStyle = new ol.style.Style({
                  fill: new ol.style.Fill({ color: '#6666FF', weight: 8 }),
                  stroke: new ol.style.Stroke({ color: '#6666FF', width: 4 })
              });
              // if the nnode is also a neighbor of the node, make the line purple
              if (node.neighbors.some(function(neighbor) { return neighbor.id == id; })) {
                lineStyle = new ol.style.Style({
                  fill: new ol.style.Fill({ color: '#FF66FF', weight: 8 }),
                  stroke: new ol.style.Stroke({ color: '#FF66FF', width: 4 })
                });
              }

              var vectorLineLayer = new ol.layer.Vector({
                  source: vectorLine,
                  style: lineStyle
              });
              neighborLayers.push(vectorLineLayer);
              map.addLayer(vectorLineLayer);
            });
          }

          panel += '<br/>';

          panel += '<b>Elsewhere</b><br/>';
          var node_id = parseInt(node.id, 16);
          panel += '<a href="https://meshtastic.liamcottle.net/?node_id=' + node_id + '" target="_blank">Liam\'s Map</a><br/>';
          panel += '<a href="https://meshmap.net/#' + node_id + '" target="_blank">MeshMap</a><br/>';

          //content.innerHTML = panel;
          //overlay.setPosition(ol.proj.fromLonLat(node.position));

          nodeTitle.innerHTML = node.long_name;
          nodeSubtitle.innerHTML = node.short_name;
          nodeContent.innerHTML = panel;
        } else {
          //content.innerHTML = '<b>Unknown</b>';
          //overlay.setPosition(coordinate);

          nodeTitle.innerHTML = 'Unknown';
          nodeSubtitle.innerHTML = 'UNK';
          nodeContent.innerHTML = '';
          $('#details').hide();
        }
      } else {
        //overlay.setPosition(undefined);
        nodeTitle.innerHTML = '';
        nodeSubtitle.innerHTML = '';
        nodeContent.innerHTML = '';
        closer.blur();
        $('#details').hide();
      }
    });
    $('#details').hide();
  </script>
  <style>
    #map {
      height: 100%;
      width: 100%;
    }
    #legend {
      position: absolute;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
    }
    #details {
      position: absolute;
      top: 20px;
      right: 20px;
      z-index: 1000;
    }
    .ol-popup {
      position: absolute;
      background-color: white;
      box-shadow: 0 1px 4px rgba(0,0,0,0.2);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #cccccc;
      bottom: 12px;
      left: -50px;
      min-width: 280px;
    }
    .ol-popup:after, .ol-popup:before {
      top: 100%;
      border: solid transparent;
      content: " ";
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
    }
    .ol-popup:after {
      border-top-color: white;
      border-width: 10px;
      left: 48px;
      margin-left: -10px;
    }
    .ol-popup:before {
      border-top-color: #cccccc;
      border-width: 11px;
      left: 48px;
      margin-left: -11px;
    }
    .ol-popup-closer {
      text-decoration: none;
      position: absolute;
      top: 2px;
      right: 8px;
    }
    .ol-popup-closer:after {
      content: "x";
    }
  </style>
{% endblock %}
